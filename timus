#!/usr/bin/env python

from optparse import OptionParser
from os import path

from Program import CompilingProgram, TestSet
from Compiler import GPP
from Logger import Log

HELP_MESSAGE = """
timus [OPTIONS] <action> <filename>
Use one of the action:
    run     - Run program using by default patern "konsole --hold -e {bin}"
              where {bin} is name of executable file.
              Use option -c to change patern.
    compile - Compile source file.
              Use option -f to force recompile.
    test    - Test program. Searching for <source>.tests by default.
              Use option -t to specify tests file.
"""


def main():
    # Init option parser
    parser = OptionParser(usage=HELP_MESSAGE)

    parser.add_option("-t", "--tests", action="store",
                      type="string", dest="tests",
                      help="Specify tests filename. By default "
                           "searching for <source_file>.tests.")

    parser.add_option("-c", "--cmd", action="store",
                      type="string", dest="cmd",
                      help="Specify patern for 'run' action",
                      default="konsole --hold -e {bin}")

    parser.add_option("-f", "--force", action="store_true",
                      dest="force", help="Force compile.")

    parser.add_option("-l", "--log-lvl", action="store",
                      dest="log_lvl", default="msg",
                      help="Set logging level:\n err - show"
                           "only error messages,\n msg - show"
                           "basic messages (default)\n"
                           " vrb - show every execute command")

    (opts, args) = parser.parse_args()

    # Init logger
    LOG_LVL_OPTS = {
        "err": Log.Err,
        "msg": Log.Msg,
        "vrb": Log.Vrb
    }
    LOG = Log(LOG_LVL_OPTS[opts.log_lvl])

    # Action
    if len(args) == 2:
        (action, srcfile) = args
        prog = CompilingProgram(srcfile, GPP())

        if action == "run":
            prog.run(cmd=opts.cmd)

        elif action == "compile":
            prog.compile(GPP())

        elif action == "test":
            testsfn = srcfile + ".tests"
            if opts.tests is not None:
                testsfn = opts.tests
            if path.exists(testsfn):
                tests = TestSet(testsfn)
                prog.test(tests)
            else:
                LOG(Log.Err, "Tests file {0} not found.\n"
                             "\tMake shure it exists"
                             " or use option -t to specify it."
                             .format(testsfn))

        else:
            LOG(Log.Err, "Wrong action.")
    else:
        LOG(Log.Err, "Wrong args count.")

if __name__ == '__main__':
    main()
