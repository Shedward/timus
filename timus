#!/usr/bin/env python

from optparse import OptionParser
from os import path

from Program import CompilingProgram, TestSet
from Compiler import GPP
from Logger import Log


def FatalError(*args):
    print("Error: ", *args)
    exit()

HELP_MESSAGE = """
timus [OPTIONS] <action> <filename>
Use one of the action:
    run     - Run program using by default pattern "konsole --hold -e {bin}"
              where {bin} is name of executable file.
              Use -c to change patern.
    compile - Compile source file. With interpret languages do nothing.
              Use -f to force recompile.
    test    - Test program. Searching for <source>.tests by default.
              Use -t to specify tests file.

"""


def main():
    # Init option parser
    parser = OptionParser(usage=HELP_MESSAGE)

    parser.add_option("-t", "--tests", action="store",
                      type="string", dest="tests",
                      help="Specify tests filename. By default "
                           "searching for <source_file>.tests.")

    parser.add_option("-r", "--run", action="store",
                      type="string", dest="cmd",
                      help="Specify pattern for 'run' action",
                      default="konsole --hold -e {bin}")

    parser.add_option("-f", "--force", action="store_true",
                      dest="force", help="Force recompile.")

    parser.add_option("-l", "--log-lvl", action="store",
                      dest="log_lvl", default="msg",
                      help="Set logging level:\n err - show "
                           "only error messages,\n msg - show "
                           "basic messages (default),\n"
                           " vrb - show every execute command")

    parser.add_option("--time-limit", action="store",
                      help="Specify time limit in seconds. "
                           "If program running longer "
                           "it will be terminated with "
                           "'Time limit exceeded' error. "
                           "Using in test action",
                      dest="time_limit", type="float")

    parser.add_option("--mem-limit", action="store",
                      help="Specify maximum memory usage in kbytes"
                           "also you can use notation like 1K, 5.5M, "
                           "0.1g. If program exceed the limit "
                           "it will be terminated with "
                           "'Memory limit exceeded' error. "
                           "Using in test action.",
                           dest="mem_limit", type="string")

    parser.add_option("-c", "--run-count", action="store",
                      help="Specify amount of runing. "
                           "More runs, the more accurate "
                           "the measurements",
                      dest="run_count", type="int",
                      default=1
                      )

    (opts, args) = parser.parse_args()

    # Convert mem limit to KB if needed.
    if opts.mem_limit is not None:
        p = opts.mem_limit[-1].upper()
        m = float(opts.mem_limit[0:-1])
        if p == 'G':
            opts.mem_limit = m * 1024 ** 2
        elif p == 'M':
            opts.mem_limit = m * 1024
        elif p == 'K':
            opts.mem_limit = m
        elif p.isdigit():
            opts.mem_limit = float(opts.mem_limit)
        else:
            FatalError("Wrong mem limit: "+opts.mem_limit)

        opts.mem_limit = int(round(opts.mem_limit * 1024))  # to bytes

    # Init logger
    LOG_LVL_OPTS = {
        "err": Log.Err,
        "msg": Log.Msg,
        "vrb": Log.Vrb
    }
    Log(LOG_LVL_OPTS[opts.log_lvl])

    # Action
    if len(args) == 2:
        (action, srcfile) = args

        if not path.exists(srcfile):
            FatalError("Source file '{0}' not found.".format(srcfile))

        compiler = GPP()
        prog = CompilingProgram(srcfile, compiler)

        if action == "run":
            prog.run(cmd=opts.cmd)

        elif action == "compile":
            prog.compile()

        elif action == "test":
            testsfn = srcfile + ".tests"
            if opts.tests is not None:
                testsfn = opts.tests
            if path.exists(testsfn):
                tests = TestSet(testsfn)
                prog.test(tests, run_count=opts.run_count,
                          time_limit=opts.time_limit,
                          mem_limit=opts.mem_limit)
            else:
                FatalError("Tests file {0} not found.\n"
                           "\tMake shure it exists"
                           " or use option -t to specify it."
                           .format(testsfn))

        else:
            FatalError("Wrong action: "+action)
    else:
        FatalError("Wrong args count.")

if __name__ == '__main__':
    main()
